{"ast":null,"code":"var _jsxFileName = \"/home/user/Downloads/correctionP7/client/src/pages/Post.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { AuthContext } from \"../helpers/AuthContext\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialValues = {\n  comment: \"\"\n};\nconst validationSchema = Yup.object().shape({\n  comment: Yup.string().min(1).max(150).required(\"Feel free to chat 💬 \")\n});\n\nfunction Post() {\n  _s();\n\n  let {\n    id\n  } = useParams();\n  const [postObject, setPostObject] = useState({});\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState({\n    commentText: \"\",\n    id: null\n  });\n  const {\n    authState\n  } = useContext(AuthContext);\n  const adminRole = authState.role === \"admin\"; // console.log(adminRole);\n\n  let history = useHistory();\n  useEffect(() => {\n    //`https://git.heroku.com/groupomania-git504.git/posts/byId/${id}`\n    axios.get(`http://localhost:3001/posts/byId/${id}`).then(response => {\n      console.log(response.data);\n      setPostObject(response.data);\n    }); //`https://git.heroku.com/groupomania-git504.git/comments/${id}`\n\n    axios.get(`http://localhost:3001/comments/${id}`).then(response => {\n      setComments(response.data);\n    });\n  }, [id]);\n\n  const addComment = () => {\n    const commentToCheck = newComment.commentText; //console.log(commentToCheck);\n\n    if (commentToCheck === \"\") {//console.log(\"nocomment\");\n    } else {\n      axios.post( //\"https://git.heroku.com/groupomania-git504.git/comments\"\n      \"http://localhost:3001/comments\", {\n        commentBody: newComment.commentText,\n        PostId: id\n      }, {\n        headers: {\n          accessToken: localStorage.getItem(\"accessToken\")\n        }\n      }).then(response => {\n        if (response.data.error) {\n          console.log(response.data.error);\n        } else {\n          // console.log(response.data);\n          const commentToAdd = { ...response.data\n          };\n          setComments([...comments, commentToAdd]);\n          setNewComment({\n            commentText: \"\",\n            id: null\n          });\n        }\n      });\n    }\n  };\n\n  const deleteComment = id => {\n    axios //`https://git.heroku.com/groupomania-git504.git/comments/${id}`\n    .delete(`http://localhost:3001/comments/${id}`, {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(() => {\n      setComments(comments.filter(val => {\n        return val.id !== id;\n      }));\n    });\n  };\n\n  const deletePost = id => {\n    axios //`https://git.heroku.com/groupomania-git504.git/posts/${id}`\n    .delete(`http://localhost:3001/posts/${id}`, {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(() => {\n      history.push(\"/\");\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: initialValues,\n    onClick: addComment,\n    validationSchema: validationSchema,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"postPage\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"leftSide\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post postComment\",\n          id: \"individual\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"title\",\n            children: postObject.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"body\",\n            onDoubleClick: () => {\n              if (authState.username === postObject.username || adminRole === true) {\n                history.push(`/updatepost/${id}`);\n              }\n            },\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [postObject.image !== undefined && /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"thumbnail\",\n                src: `http://localhost:3001/${postObject.image}`,\n                alt: \"img from a post\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\" \", postObject.postText]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer\",\n            children: [\"from \", postObject.username, authState.username === postObject.username || adminRole === true ? /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"smallBtn\",\n              onClick: () => {\n                deletePost(postObject.id);\n              },\n              children: [\" \", \"\\uD83D\\uDDD1\\uFE0F\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 17\n            }, this) : \"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rightSide\",\n        children: [/*#__PURE__*/_jsxDEV(Form, {\n          className: \"addCommentContainer\",\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            as: \"textarea\",\n            name: \"comment\",\n            type: \"text\",\n            placeholder: \"Say something about this...\",\n            autoComplete: \"off\",\n            cols: \"30\",\n            rows: \"3\",\n            value: newComment.commentText,\n            onChange: event => {\n              setNewComment({\n                commentText: event.target.value,\n                id: null\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            onClick: addComment,\n            children: \"comment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"listOfComments\",\n          children: [/*#__PURE__*/_jsxDEV(ErrorMessage, {\n            className: \"easyComment\",\n            name: \"comment\",\n            component: \"span\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this), comments.map((comment, key) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"comment\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: comment.commentBody\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: [\"\\u23E9 \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: comment.username\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 23\n                }, this), \" commented on your post\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 19\n              }, this), authState.username === comment.username || adminRole === true ? /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"smallBtn\",\n                onClick: () => {\n                  deleteComment(comment.id);\n                },\n                children: \"\\uD83D\\uDDD1\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 21\n              }, this) : \"\"]\n            }, key, true, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 17\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Post, \"4BU6GYoP+xRYxGmywSESOwAdP4k=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = Post;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/home/user/Downloads/correctionP7/client/src/pages/Post.js"],"names":["React","useEffect","useState","useContext","useParams","useHistory","axios","AuthContext","Formik","Form","Field","ErrorMessage","Yup","initialValues","comment","validationSchema","object","shape","string","min","max","required","Post","id","postObject","setPostObject","comments","setComments","newComment","setNewComment","commentText","authState","adminRole","role","history","get","then","response","console","log","data","addComment","commentToCheck","post","commentBody","PostId","headers","accessToken","localStorage","getItem","error","commentToAdd","deleteComment","delete","filter","val","deletePost","push","title","username","image","undefined","postText","event","target","value","map","key"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { AuthContext } from \"../helpers/AuthContext\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\n\nconst initialValues = {\n  comment: \"\",\n};\nconst validationSchema = Yup.object().shape({\n  comment: Yup.string().min(1).max(150).required(\"Feel free to chat 💬 \"),\n});\n\nfunction Post() {\n  let { id } = useParams();\n  const [postObject, setPostObject] = useState({});\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState({ commentText: \"\", id: null });\n  const { authState } = useContext(AuthContext);\n\n  const adminRole = authState.role === \"admin\";\n  // console.log(adminRole);\n\n  let history = useHistory();\n\n  useEffect(() => {\n    //`https://git.heroku.com/groupomania-git504.git/posts/byId/${id}`\n    axios.get(`http://localhost:3001/posts/byId/${id}`).then((response) => {\n      console.log(response.data);\n      setPostObject(response.data);\n    });\n    //`https://git.heroku.com/groupomania-git504.git/comments/${id}`\n    axios.get(`http://localhost:3001/comments/${id}`).then((response) => {\n      setComments(response.data);\n    });\n  }, [id]);\n\n  const addComment = () => {\n    const commentToCheck = newComment.commentText;\n    //console.log(commentToCheck);\n    if (commentToCheck === \"\") {\n      //console.log(\"nocomment\");\n    } else {\n      axios\n        .post(\n          //\"https://git.heroku.com/groupomania-git504.git/comments\"\n          \"http://localhost:3001/comments\",\n          {\n            commentBody: newComment.commentText,\n            PostId: id,\n          },\n          {\n            headers: {\n              accessToken: localStorage.getItem(\"accessToken\"),\n            },\n          }\n        )\n        .then((response) => {\n          if (response.data.error) {\n            console.log(response.data.error);\n          } else {\n            // console.log(response.data);\n            const commentToAdd = {\n              ...response.data,\n            };\n            setComments([...comments, commentToAdd]);\n            setNewComment({ commentText: \"\", id: null });\n          }\n        });\n    }\n  };\n\n  const deleteComment = (id) => {\n    axios\n      //`https://git.heroku.com/groupomania-git504.git/comments/${id}`\n      .delete(`http://localhost:3001/comments/${id}`, {\n        headers: { accessToken: localStorage.getItem(\"accessToken\") },\n      })\n      .then(() => {\n        setComments(\n          comments.filter((val) => {\n            return val.id !== id;\n          })\n        );\n      });\n  };\n\n  const deletePost = (id) => {\n    axios\n      //`https://git.heroku.com/groupomania-git504.git/posts/${id}`\n      .delete(`http://localhost:3001/posts/${id}`, {\n        headers: { accessToken: localStorage.getItem(\"accessToken\") },\n      })\n      .then(() => {\n        history.push(\"/\");\n      });\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onClick={addComment}\n      validationSchema={validationSchema}\n    >\n      <div className=\"postPage\">\n        <div className=\"leftSide\">\n          <div className=\"post postComment\" id=\"individual\">\n            <div className=\"title\">{postObject.title}</div>\n\n            <div\n              className=\"body\"\n              onDoubleClick={() => {\n                if (\n                  authState.username === postObject.username ||\n                  adminRole === true\n                ) {\n                  history.push(`/updatepost/${id}`);\n                }\n              }}\n            >\n              {\" \"}\n              <div>\n                {postObject.image !== undefined && (\n                  <img\n                    className=\"thumbnail\"\n                    src={`http://localhost:3001/${postObject.image}`}\n                    alt=\"img from a post\"\n                  />\n                )}\n                <p> {postObject.postText}</p>\n              </div>\n            </div>\n            <div className=\"footer\">\n              from {postObject.username}\n              {authState.username === postObject.username ||\n              adminRole === true ? (\n                <button\n                  className=\"smallBtn\"\n                  onClick={() => {\n                    deletePost(postObject.id);\n                  }}\n                >\n                  {\" \"}\n                  🗑️\n                </button>\n              ) : (\n                \"\"\n              )}\n            </div>\n          </div>\n        </div>\n        <div className=\"rightSide\">\n          <Form className=\"addCommentContainer\">\n            <Field\n              as=\"textarea\"\n              name=\"comment\"\n              type=\"text\"\n              placeholder=\"Say something about this...\"\n              autoComplete=\"off\"\n              cols=\"30\"\n              rows=\"3\"\n              value={newComment.commentText}\n              onChange={(event) => {\n                setNewComment({ commentText: event.target.value, id: null });\n              }}\n            />\n            <button type=\"submit\" onClick={addComment}>\n              comment\n            </button>\n          </Form>\n          <div className=\"listOfComments\">\n            <ErrorMessage\n              className=\"easyComment\"\n              name=\"comment\"\n              component=\"span\"\n            />\n            {comments.map((comment, key) => {\n              return (\n                <div key={key} className=\"comment\">\n                  <p>{comment.commentBody}</p>\n\n                  <label>\n                    ⏩ <strong>{comment.username}</strong> commented on your\n                    post\n                  </label>\n                  {authState.username === comment.username ||\n                  adminRole === true ? (\n                    <button\n                      className=\"smallBtn\"\n                      onClick={() => {\n                        deleteComment(comment.id);\n                      }}\n                    >\n                      🗑️\n                    </button>\n                  ) : (\n                    \"\"\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </Formik>\n  );\n}\n\nexport default Post;\n"]},"metadata":{},"sourceType":"module"}