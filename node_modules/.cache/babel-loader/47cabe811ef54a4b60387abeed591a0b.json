{"ast":null,"code":"var _jsxFileName = \"/home/user/Downloads/correctionP7/client/src/pages/updatePost.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useLayoutEffect, useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction UpdatePost() {\n  _s();\n\n  var _postObject$title, _postObject$postText;\n\n  const [image, setImage] = useState(\"\");\n  let {\n    id\n  } = useParams();\n  const [postObject, setPostObject] = useState({});\n  let history = useHistory();\n  const initialValues = {\n    title: \"\",\n    postText: \"\"\n  };\n  useEffect(() => {\n    //`https://git.heroku.com/groupomania-git504.git/posts/byId/${id}`\n    axios.get(`http://localhost:3001/posts/byId/${id}`).then(response => {\n      //console.log(response.data);\n      setPostObject(response.data);\n    });\n  }, [id]);\n  const validationSchema = Yup.object().shape({\n    title: Yup.string().min(1).max(33).required(\"a title is needed ðŸ˜‰\"),\n    postText: Yup.string().min(1).max(150).required(\"a post is needed ðŸ”¤\")\n  });\n\n  const onSubmit = data => {\n    const formData = new FormData();\n    formData.append(\"image\", image);\n    formData.append(\"title\", data.title);\n    formData.append(\"postText\", data.postText);\n    axios //\"https://git.heroku.com/groupomania-git504.git/posts\"\n    .put(`http://localhost:3001/posts/${id}`, formData, {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(response => {\n      console.log(response);\n      history.push(\"/\");\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"createPostPage\",\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      enableReinitialize: true,\n      initialValues: {\n        title: (_postObject$title = postObject === null || postObject === void 0 ? void 0 : postObject.title) !== null && _postObject$title !== void 0 ? _postObject$title : \"\",\n        postText: (_postObject$postText = postObject === null || postObject === void 0 ? void 0 : postObject.postText) !== null && _postObject$postText !== void 0 ? _postObject$postText : \"\"\n      },\n      onSubmit: onSubmit,\n      method: \"PUT\",\n      encType: \"multipart/form-data\",\n      validationSchema: validationSchema,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        className: \"formContainer\",\n        method: \"PUT\",\n        action: \"/postimg\",\n        encType: \"multipart/form-data\",\n        children: [postObject.image !== undefined && /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"thumbnail\",\n          src: `http://localhost:3001/${postObject.image}`,\n          alt: \"img from a post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"title\",\n          component: \"span\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          type: \"text\",\n          autoComplete: \"off\",\n          className: \"inputCreatePost \",\n          name: \"title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"postText\",\n          component: \"span\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          as: \"textarea\",\n          autoComplete: \"off\",\n          className: \"inputCreatePost textAreaPost\",\n          name: \"postText\",\n          id: \"\",\n          cols: \"30\",\n          rows: \"15\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"file\",\n            children: \"\\uD83D\\uDCF7 da pic\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"file\",\n            className: \"btn\",\n            type: \"file\",\n            name: \"image\",\n            size: \"lg\",\n            onChange: e => setImage(e.target.files[0])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn\",\n            type: \"submit\",\n            children: \"UPDATE POST\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(UpdatePost, \"HZPyUgnwmYg5qIjVAT0iJDInGFA=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = UpdatePost;\nexport default UpdatePost;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdatePost\");","map":{"version":3,"sources":["/home/user/Downloads/correctionP7/client/src/pages/updatePost.js"],"names":["React","useEffect","useLayoutEffect","useState","Formik","Form","Field","ErrorMessage","Yup","axios","useHistory","useParams","UpdatePost","image","setImage","id","postObject","setPostObject","history","initialValues","title","postText","get","then","response","data","validationSchema","object","shape","string","min","max","required","onSubmit","formData","FormData","append","put","headers","accessToken","localStorage","getItem","console","log","push","undefined","e","target","files"],"mappings":"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","sourcesContent":["import React, { useEffect,useLayoutEffect, useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nfunction UpdatePost() {\n  const [image, setImage] = useState(\"\");\n  let { id } = useParams();\n  const [postObject, setPostObject] = useState({});\n\n  let history = useHistory();\n  const initialValues = {\n    title: \"\",\n    postText: \"\",\n  };\n\n  useEffect(() => {\n    //`https://git.heroku.com/groupomania-git504.git/posts/byId/${id}`\n    axios.get(`http://localhost:3001/posts/byId/${id}`).then((response) => {\n      //console.log(response.data);\n      setPostObject(response.data);\n    });\n  }, [id]);\n\n\n  const validationSchema = Yup.object().shape({\n    title: Yup.string().min(1).max(33).required(\"a title is needed ðŸ˜‰\"),\n    postText: Yup.string().min(1).max(150).required(\"a post is needed ðŸ”¤\"),\n  });\n\n  const onSubmit = (data) => {\n    const formData = new FormData();\n    formData.append(\"image\", image);\n    formData.append(\"title\", data.title);\n    formData.append(\"postText\", data.postText);\n\n    axios\n      //\"https://git.heroku.com/groupomania-git504.git/posts\"\n      .put(`http://localhost:3001/posts/${id}`, formData, {\n        headers: { accessToken: localStorage.getItem(\"accessToken\") },\n      })\n      .then((response) => {\n        console.log(response)\n        history.push(\"/\");\n      });\n  };\n  return (\n    <div className=\"createPostPage\">\n      <Formik\n        enableReinitialize={true}\n        initialValues={{\n        title: postObject?.title ?? \"\",\n        postText: postObject?.postText ?? \"\"\n       }}\n        onSubmit={onSubmit}\n        method=\"PUT\"\n        encType=\"multipart/form-data\"\n        validationSchema={validationSchema}\n      >\n        <Form\n          className=\"formContainer\"\n          method=\"PUT\"\n          action=\"/postimg\"\n          encType=\"multipart/form-data\"\n          \n        >\n          {postObject.image !== undefined && (\n            <img\n              className=\"thumbnail\"\n              src={`http://localhost:3001/${postObject.image}`}\n              alt=\"img from a post\"\n            />\n          )}\n\n          <label>title</label>\n          <ErrorMessage name=\"title\" component=\"span\" />\n          <Field\n            type=\"text\"\n            autoComplete=\"off\"\n            className=\"inputCreatePost \"\n            name=\"title\"\n          />\n          <label>post</label>\n          <ErrorMessage name=\"postText\" component=\"span\" />\n          <Field\n            as=\"textarea\"\n            autoComplete=\"off\"\n            className=\"inputCreatePost textAreaPost\"\n            name=\"postText\"\n            id=\"\"\n            cols=\"30\"\n            rows=\"15\"\n          ></Field>\n          <div>\n            <label htmlFor=\"file\">ðŸ“· da pic</label>\n            <input\n              id=\"file\"\n              className=\"btn\"\n              type=\"file\"\n              name=\"image\"\n              size=\"lg\"\n              onChange={(e) => setImage(e.target.files[0])}\n            />\n            <button className=\"btn\" type=\"submit\">\n              UPDATE POST\n            </button>\n          </div>\n        </Form>\n      </Formik>\n    </div>\n  );\n}\n\nexport default UpdatePost;\n"]},"metadata":{},"sourceType":"module"}